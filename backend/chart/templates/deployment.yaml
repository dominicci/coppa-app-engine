kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  {{- include "rover.labels" . }}
    app: coppa-{{ .Values.env }}-{{ .Values.brandCode }}
spec:
  replicas: 3
  minReadySeconds: 5
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 5
      maxUnavailable: 1
  selector:
    matchLabels:
      app: coppa-{{ .Values.env }}-{{ .Values.brandCode }}
      brand: {{ .Values.brand }}
      version: {{ .Values.stage }}
  template:
    name: {{ .Release.Name }}
    metadata:
      annotations:
        # disable Istio sidecar injection
        sidecar.istio.io/inject: "false"
        # Bypass Istio egress completely (we don't install it)
        traffic.sidecar.istio.io/excludeOutboundIPRanges: ""
      labels:
        app: coppa-{{ .Values.env }}-{{ .Values.brandCode }}
        brand: {{ .Values.brand }}
        version: {{ .Values.stage }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: gcr.io/{{ .Values.gcloudProjectId }}/coppa-{{ .Values.brand }}:{{ .Values.stage }}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health?lp
              port: 8080
          readinessProbe:
            httpGet:
              path: /health?rp
              port: 8080
          volumeMounts:
            - name: builds
              mountPath: /data
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
          resources:
            requests:
              cpu: {{ .Values.resourcesCpu | default "100m" }}
              memory: {{ .Values.resourcesMemory | default "256Mi" }}
            limits:
              cpu: {{ .Values.resourcesCpu | default "100m" }}
              memory: {{ .Values.resourcesMemory | default "256Mi" }}
      affinity:
        # podAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #   - labelSelector:
        #       matchExpressions:
        #       - key: cloud.google.com/gke-preemptible
        #         operator: DoesNotExist
        #     topologyKey: "kubernetes.io/hostname"
        # podAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #   - labelSelector:
        #       matchExpressions:
        #       - key: app
        #         operator: In
        #         values: 
        #         - {{ .Values.env }}-{{ .Values.brand }}
        #     topologyKey: "kubernetes.io/hostname"
        # {{ if .Values.nodepoolName }}
        # podAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #   - labelSelector:
        #       matchExpressions:
        #       - key: cloud.google.com/gke-nodepool
        #         operator: In
        #         values: ["{{ .Values.nodepoolName }}"]
        #     topologyKey: "kubernetes.io/hostname"
        # {{ end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: 
                  - coppa-{{ .Values.env }}-{{ .Values.brandCode }}
              topologyKey: "kubernetes.io/hostname"
        # nodeAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #     nodeSelectorTerms:
        #         - matchExpressions:
        #           - key: cloud.google.com/gke-preemptible
        #             operator: DoesNotExist
        #         {{ if .Values.nodepoolName }}
        #         - matchExpressions:
        #           - key: cloud.google.com/gke-nodepool
        #             operator: In
        #             values: ["{{ .Values.nodepoolName }}"]
        #         {{ end }}
      volumes:
        - name: builds
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc-nfs
            readOnly: false
